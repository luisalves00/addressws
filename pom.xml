<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.tamarillo</groupId>
	<artifactId>addressws</artifactId>
	<version>0.0.2-SNAPSHOT</version>
	<packaging>war</packaging>

	<name>Address WS Webapp</name>
	<description>Webapp to make available portuguese zip code and addresses through jax-rs with lucene suport</description>

	<properties>
		<!-- Explicitly declaring the source encoding eliminates the following 
			message: -->
		<!-- [WARNING] Using platform encoding (UTF-8 actually) to copy filtered 
			resources, i.e. build is platform dependent! -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<!-- Timestamp format for the maven.build.timestamp property -->
		<!-- You can reference property in pom.xml or filtered resources (must 
			enable third-party plugin if using Maven < 2.1) -->
		<maven.build.timestamp.format>yyyyMMdd'T'HHmmss</maven.build.timestamp.format>
		<!-- Specify the JBoss AS directory to be the JBOSS_HOME environment variable -->
		<jboss.home>${env.JBOSS_HOME}</jboss.home>

		<!-- App Version -->
		<addressws.version>0.0.2-SNAPSHOT</addressws.version>
	</properties>

	<repositories>

		<!-- Jboss Repo -->
		<repository>
			<id>jboss-public-repository-group</id>
			<name>JBoss Public Repository Group</name>
			<url>http://repository.jboss.org/nexus/content/groups/public/</url>
			<layout>default</layout>
			<releases>
				<enabled>true</enabled>
				<updatePolicy>never</updatePolicy>
			</releases>
			<snapshots>
				<enabled>true</enabled>
				<updatePolicy>never</updatePolicy>
			</snapshots>
		</repository>

		<!-- Primefaces Repo -->
		<repository>
			<id>prime-repo</id>
			<name>PrimeFaces Maven Repository</name>
			<url>http://repository.primefaces.org</url>
			<layout>default</layout>
		</repository>
	</repositories>

	<pluginRepositories>
		<pluginRepository>
			<id>sonatype-snapshots</id>
			<name>Sonatype Snapshots</name>
			<url>https://oss.sonatype.org/content/repositories/snapshots/</url>
		</pluginRepository>
	</pluginRepositories>

	<dependencyManagement>
		<dependencies>
			<!-- Define the version of JBoss' Java EE 6 APIs we want to import. Any 
				dependencies from org.jboss.spec will have their version defined by this 
				BOM -->
			<!-- JBoss distributes a complete set of Java EE 6 APIs including a Bill 
				of Materials (BOM). A BOM specifies the versions of a "stack" (or a collection) 
				of artifacts. We use this here so that we always get the correct versions 
				of artifacts. Here we use the jboss-javaee-web-6.0 stack (you can read this 
				as the JBoss stack of the Java EE Web Profile 6 APIs), and we use version 
				2.0.0.Beta1 which is the latest release of the stack. You can actually use 
				this stack with any version of JBoss AS that implements Java EE 6, not just 
				JBoss AS 7! -->
			<dependency>
				<groupId>org.jboss.spec</groupId>
				<artifactId>jboss-javaee-web-6.0</artifactId>
				<version>2.0.0.Final</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>

		<!-- First declare the APIs we depend on and need for compilation. All 
			of them are provided by JBoss AS 7 -->

		<dependency>
			<groupId>javax</groupId>
			<artifactId>javaee-web-api</artifactId>
			<version>6.0</version>
			<scope>provided</scope>
		</dependency>

		<!-- Explicitly declare Mojarra 2.1.3_01 dependency -->
		<!--  
		<dependency>
			<groupId>com.sun.faces</groupId>
			<artifactId>jsf-api</artifactId>
			<version>2.1.3_01</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>com.sun.faces</groupId>
			<artifactId>jsf-impl</artifactId>
			<version>2.1.3_01</version>
			<scope>provided</scope>
		</dependency>
		-->


		<!-- Import the CDI API, we use provided scope as the API is included in 
			JBoss AS 7 -->
		<!-- <dependency> <groupId>javax.enterprise</groupId> <artifactId>cdi-api</artifactId> 
			<scope>provided</scope> </dependency> -->

		<!-- Import the Common Annotations API (JSR-250), we use provided scope 
			as the API is included in JBoss AS 7 -->
		<!-- <dependency> <groupId>org.jboss.spec.javax.annotation</groupId> <artifactId>jboss-annotations-api_1.1_spec</artifactId> 
			<scope>provided</scope> </dependency> -->

		<!-- Import the JAX-RS API, we use provided scope as the API is included 
			in JBoss AS 7 -->
		<!-- <dependency> <groupId>org.jboss.spec.javax.ws.rs</groupId> <artifactId>jboss-jaxrs-api_1.1_spec</artifactId> 
			<scope>provided</scope> </dependency> -->

		<!-- Use Jettison instead of Jackson -->
		<dependency>
			<groupId>org.jboss.resteasy</groupId>
			<artifactId>resteasy-jaxrs</artifactId>
			<version>2.2.1.GA</version>
			<scope>compile</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.resteasy</groupId>
			<artifactId>resteasy-jaxb-provider</artifactId>
			<version>2.2.0.GA</version>
			<scope>compile</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.resteasy</groupId>
			<artifactId>resteasy-jettison-provider</artifactId>
			<version>2.2.0.GA</version>
			<scope>compile</scope>
		</dependency>

		<!-- Security (Picketbox) -->
		<!-- TODO -->

		<!-- Import the JPA API, we use provided scope as the API is included in 
			JBoss AS 7 -->
		<!-- <dependency> <groupId>org.hibernate.javax.persistence</groupId> <artifactId>hibernate-jpa-2.0-api</artifactId> 
			<scope>provided</scope> </dependency> -->

		<!-- Import the EJB API, we use provided scope as the API is included in 
			JBoss AS 7 -->
		<!-- <dependency> <groupId>org.jboss.spec.javax.ejb</groupId> <artifactId>jboss-ejb-api_3.1_spec</artifactId> 
			<scope>provided</scope> </dependency> -->

		<!-- JSR-303 (Bean Validation) Implementation -->
		<!-- Provides portable constraints such as @Email -->
		<!-- Hibernate Validator is shipped in JBoss AS 7 -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>4.2.0.Final</version>
			<scope>provided</scope>
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- Now we declare any tools needed -->

		<!-- Annotation processor to generate the JPA 2.0 metamodel classes for 
			typesafe criteria queries -->
		<!-- FIXME - why this doens't compile?!?! -->
		<!-- <dependency> <groupId>org.hibernate</groupId> <artifactId>hibernate-jpamodelgen</artifactId> 
			<version>1.1.1.Final</version> <scope>provided</scope> </dependency> -->

		<!-- Lucene -->
		<dependency>
			<groupId>org.apache.lucene</groupId>
			<artifactId>lucene-core</artifactId>
			<version>4.0.0</version>
		</dependency>

		<!-- Quartz -->
		<dependency>
			<groupId>org.quartz-scheduler</groupId>
			<artifactId>quartz</artifactId>
			<version>2.1.6</version>
		</dependency>

		<dependency>
			<groupId>org.quartz-scheduler</groupId>
			<artifactId>quartz-jboss</artifactId>
			<version>2.1.6</version>
		</dependency>

		<!-- StringUtils, WordUtils, etc... -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.1</version>
		</dependency>

		<!-- Logging -->
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.0.1</version>
			<scope>compile</scope>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jul-to-slf4j</artifactId>
			<version>1.7.2</version>
		</dependency>

		<!-- Add primefaces and extensions power -->
		<dependency>
			<groupId>org.primefaces.extensions</groupId>
			<artifactId>primefaces-extensions</artifactId>
			<version>0.6.2</version>
		</dependency>

		<dependency>
			<groupId>commons-fileupload</groupId>
			<artifactId>commons-fileupload</artifactId>
			<version>1.2.1</version>
		</dependency>

		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.0.1</version>
		</dependency>

		<!-- Java Universal Charset Detector -->

		<dependency>
			<groupId>com.googlecode.juniversalchardet</groupId>
			<artifactId>juniversalchardet</artifactId>
			<version>1.0.3</version>
		</dependency>

		<!-- Primefaces Themes -->
		<dependency>
			<groupId>org.primefaces.themes</groupId>
			<artifactId>flick</artifactId>
			<version>1.0.4</version>
		</dependency>

		<!-- CSV -->
		<dependency>
			<groupId>org.jsefa</groupId>
			<artifactId>jsefa</artifactId>
			<version>0.9.3.RELEASE</version>
		</dependency>

		<!-- Mysql Connector -->
		<!-- <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> 
			<version>5.1.21</version> </dependency> -->

		<!-- Richfaces Bootstrap -->
		<!-- <dependency> <groupId>org.richfaces.sandbox.ui.bootstrap</groupId> 
			<artifactId>bootstrap-ui</artifactId> <version>4.3.0-SNAPSHOT</version> </dependency> -->

		<!-- ************************************************** -->
		<!-- *************** Test Dependencies **************** -->
		<!-- ************************************************** -->

		<!-- Needed for running tests (you may also use TestNG) -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.10</version>
			<scope>test</scope>
		</dependency>

		<!-- Optional, but highly recommended -->
		<!-- Arquillian allows you to test enterprise code such as EJBs and Transactional(JTA) 
			JPA from JUnit/TestNG -->
		<dependency>
			<groupId>org.jboss.arquillian.junit</groupId>
			<artifactId>arquillian-junit-container</artifactId>
			<version>1.0.0.CR4</version>
			<scope>test</scope>
		</dependency>

	</dependencies>

	<build>
		<!-- Maven will append the version to the finalName (which is the name 
			given to the generated war, and hence the context root) -->
		<finalName>${project.artifactId}</finalName>

		<!-- Resource Filtering -->
		<filters>
			<filter>${basedir}\${webapp.filter}.properties</filter>
		</filters>

		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>

		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>net.alchim31.maven</groupId>
					<artifactId>yuicompressor-maven-plugin</artifactId>
					<version>1.1</version>
				</plugin>

				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.codehaus.mojo</groupId>
										<artifactId>native2ascii-maven-plugin</artifactId>
										<versionRange>1.0-beta-1</versionRange>
										<goals>
											<goal>native2ascii</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute />
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>

			</plugins>
		</pluginManagement>

		<plugins>
			<!-- Compiler plugin enforces Java 1.6 compatibility and activates annotation 
				processors -->
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.3.1</version>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
					<!-- http://docs.jboss.org/hibernate/jpamodelgen/1.2/reference/en-US/html_single/#d0e265 -->
					<!-- FIXME -->
					<!-- <processors> <processor>org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor</processor> 
						</processors> -->
				</configuration>
			</plugin>

			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.1.1</version>
				<configuration>
					<!-- Java EE 6 doesn't require web.xml, Maven needs to catch up! -->
					<failOnMissingWebXml>false</failOnMissingWebXml>
					<!-- <filteringDeploymentDescriptors>true</filteringDeploymentDescriptors> -->
					<warSourceDirectory>${basedir}/src/main/webapp</warSourceDirectory>
					<webResources>
						<resource>
							<directory>src/main/webapp/</directory>
							<filtering>true</filtering>
							<includes>
								<include>**/*.xml</include>
							</includes>
						</resource>
					</webResources>
				</configuration>
			</plugin>

			<!-- native2ascii -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>native2ascii-maven-plugin</artifactId>
				<version>1.0-beta-1</version>
				<executions>
					<execution>
						<id>native2ascii-utf8-resources</id>
						<goals>
							<goal>native2ascii</goal>
						</goals>
						<configuration>
							<dest>target/resources</dest>
							<src>src/main/resources</src>
							<encoding>UTF-8</encoding>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- The JBoss AS plugin deploys your war to a local JBoss AS container -->
			<!-- To use, set the JBOSS_HOME environment variable and run: mvn package 
				jboss-as:deploy -->
			<plugin>
				<groupId>org.jboss.as.plugins</groupId>
				<artifactId>jboss-as-maven-plugin</artifactId>
				<version>7.0.2.Final</version>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<!-- The default profile skips all tests, though you can tune it to run 
				just unit tests based on a custom pattern -->
			<!-- Seperate profiles are provided for running all tests, including Arquillian 
				tests that execute in the specified container -->
			<id>dev</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<webapp.filter>dev</webapp.filter>
			</properties>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>2.4.3</version>
						<configuration>
							<skip>true</skip>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- PRD Profile to run on cloudbees -->
			<id>prd</id>
			<properties>
				<webapp.filter>prd</webapp.filter>
			</properties>
			<build>
				<plugins>
					<!-- Maven GIT commit id plugin -->
					<!-- http://ovaraksin.blogspot.com/2012/02/advanced-injection-of-maven-properties.html -->
					<!-- [DOC]https://github.com/ktoso/maven-git-commit-id-plugin -->
					<plugin>
						<groupId>pl.project13.maven</groupId>
						<artifactId>git-commit-id-plugin</artifactId>
						<version>2.1.4</version>
						<executions>
							<execution>
								<goals>
									<goal>revision</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<dotGitDirectory>${project.basedir}/.git</dotGitDirectory>
							<skipPoms>true</skipPoms>
							<generateGitPropertiesFile>true</generateGitPropertiesFile>
							<generateGitPropertiesFilename>src/main/resources/git.properties</generateGitPropertiesFilename>

							<failOnNoGitDirectory>false</failOnNoGitDirectory>
							<gitDescribe>
								<skip>false</skip>
								<always>false</always>
								<abbrev>7</abbrev>
								<dirty>-dirty</dirty>
								<forceLongFormat>false</forceLongFormat>
							</gitDescribe>
						</configuration>

					</plugin>
					<!-- END OF GIT COMMIT ID PLUGIN CONFIGURATION -->

					<!-- Plugin to get the build number -->
					<!-- http://ovaraksin.blogspot.com/2012/02/advanced-injection-of-maven-properties.html -->
					<!-- [DOC] http://mojo.codehaus.org/buildnumber-maven-plugin/ -->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>buildnumber-maven-plugin</artifactId>
						<version>1.1</version>
						<executions>
							<execution>
								<id>generate-timestamp</id>
								<phase>validate</phase>
								<goals>
									<goal>create-timestamp</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<format>{0,date,yyyy-MM-dd HH:mm}</format>
							<items>
								<item>timestamp</item>
							</items>
						</configuration>
					</plugin>

					<!-- JS and CSS compressor -->
					<plugin>
						<groupId>net.alchim31.maven</groupId>
						<artifactId>yuicompressor-maven-plugin</artifactId>
						<executions>
							<execution>
								<goals>
									<goal>compress</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<nosuffix>true</nosuffix>
						</configuration>
					</plugin>

					<plugin>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>2.4.3</version>
						<configuration>
							<skip>true</skip>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- We add the JBoss repository as we need the JBoss AS connectors for 
				Arquillian -->
			<repositories>
				<!-- The JBoss Community public repository is a composite repository 
					of several major repositories -->
				<!-- see http://community.jboss.org/wiki/MavenGettingStarted-Users -->
				<repository>
					<id>jboss-public-repository</id>
					<name>JBoss Repository</name>
					<url>http://repository.jboss.org/nexus/content/groups/public</url>
					<!-- These optional flags are designed to speed up your builds by reducing 
						remote server calls -->
					<releases>
					</releases>
					<snapshots>
						<enabled>false</enabled>
					</snapshots>
				</repository>
			</repositories>

			<pluginRepositories>
				<pluginRepository>
					<id>jboss-public-repository</id>
					<name>JBoss Repository</name>
					<url>http://repository.jboss.org/nexus/content/groups/public</url>
					<releases>
					</releases>
					<snapshots>
						<enabled>false</enabled>
					</snapshots>
				</pluginRepository>
			</pluginRepositories>

			<!-- An optional Arquillian testing profile that executes tests in your 
				JBoss AS instance -->
			<!-- This profile will start a new JBoss AS instance, and execute the 
				test, shutting it down when done -->
			<!-- Run with: mvn clean test -Parq-jbossas-managed -->
			<id>arq-jbossas-managed</id>
			<dependencies>
				<dependency>
					<groupId>org.jboss.as</groupId>
					<artifactId>jboss-as-arquillian-container-managed</artifactId>
					<version>7.0.2.Final</version>
					<scope>test</scope>
				</dependency>
			</dependencies>
		</profile>

		<profile>
			<!-- We add the JBoss repository as we need the JBoss AS connectors for 
				Arquillian -->
			<repositories>
				<!-- The JBoss Community public repository is a composite repository 
					of several major repositories -->
				<!-- see http://community.jboss.org/wiki/MavenGettingStarted-Users -->
				<repository>
					<id>jboss-public-repository</id>
					<name>JBoss Repository</name>
					<url>http://repository.jboss.org/nexus/content/groups/public</url>
					<!-- These optional flags are designed to speed up your builds by reducing 
						remote server calls -->
					<releases>
					</releases>
					<snapshots>
						<enabled>false</enabled>
					</snapshots>
				</repository>
			</repositories>

			<pluginRepositories>
				<pluginRepository>
					<id>jboss-public-repository</id>
					<name>JBoss Repository</name>
					<url>http://repository.jboss.org/nexus/content/groups/public</url>
					<releases>
					</releases>
					<snapshots>
						<enabled>false</enabled>
					</snapshots>
				</pluginRepository>
			</pluginRepositories>

			<!-- An optional Arquillian testing profile that executes tests in a remote 
				JBoss AS instance -->
			<!-- Run with: mvn clean test -Parq-jbossas-remote -->
			<id>arq-jbossas-remote</id>
			<dependencies>
				<dependency>
					<groupId>org.jboss.as</groupId>
					<artifactId>jboss-as-arquillian-container-remote</artifactId>
					<version>7.0.2.Final</version>
					<scope>test</scope>
				</dependency>
			</dependencies>
		</profile>

	</profiles>
</project>
